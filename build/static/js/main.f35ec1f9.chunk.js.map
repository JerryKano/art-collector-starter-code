{"version":3,"sources":["api/index.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromURL","url","a","fetch","response","json","data","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Loading","id","className","Preview","props","searchResults","info","setSearchResults","setFeaturedResult","setIsLoading","fetchPage","pageUrl","results","console","error","disabled","prev","onClick","next","map","record","idx","key","event","preventDefault","primaryimageurl","src","alt","description","title","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","allCenturies","allClassifications","onSubmit","htmlFor","type","placeholder","value","onChange","target","length","name","Title","log","fetchObjects","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAW,oCACXC,EAAM,8CAmBZ,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAC,EAAA,+EAEoBC,MAAMF,GAF1B,cAEGG,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeC,EAAtB,kC,4CAAO,uCAAAL,EAAA,6DACLM,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMT,EALD,UAKWH,EALX,mBAKgCC,EALhC,2BAKwDU,EALxD,oBAMHD,EANG,oBAMkBE,GANlB,kBASoBP,MAAMF,GAT1B,cASGG,EATH,gBAUgBA,EAASC,OAVzB,cAUGC,EAVH,yBAYIA,GAZJ,wG,sBAqBA,SAAeK,IAAtB,+B,4CAAO,kCAAAT,EAAA,0DACDU,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCZ,EALD,UAKWH,EALX,oBAKiCC,EALjC,kDAQoBI,MAAMF,GAR1B,cAQGG,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGU,EAAUV,EAAKU,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAjB,EAAA,0DACDU,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCZ,EALD,UAKWH,EALX,2BAKwCC,EALxC,yCAQoBI,MAAMF,GAR1B,cAQGG,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGU,EAAUV,EAAKU,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBC3EN,IAQcI,EARE,WACb,OACI,yBAAKC,GAAG,WACJ,wBAAIC,UAAU,WAAd,kBCsFGC,EA3FC,SAACC,GAAU,MAatBA,EAJDC,cAAiBC,EATM,EASNA,KAAMV,EATA,EASAA,QACvBW,EAGCH,EAHDG,iBACAC,EAECJ,EAFDI,kBACAC,EACCL,EADDK,aAZuB,SAoBVC,EApBU,8EAoBzB,WAAyBC,GAAzB,eAAA7B,EAAA,6DACE2B,GAAa,GADf,kBAI0B7B,EAAyB+B,GAJnD,OAIUC,EAJV,OAKIL,EAAiBK,GALrB,gDAOIC,QAAQC,MAAR,MAPJ,yBASIL,GAAa,GATjB,6EApByB,sBAiCzB,OAAO,2BAAOR,GAAG,WACf,4BAAQC,UAAU,cAEhB,4BACEa,UAAWT,EAAKU,KAChBd,UAAU,WACVe,QAAS,kBAAMP,EAAUJ,EAAKU,QAHhC,YAKA,4BACED,UAAWT,EAAKY,KAChBhB,UAAU,OACVe,QAAS,kBAAMP,EAAUJ,EAAKY,QAHhC,SAKF,6BAAShB,UAAU,WAmBfN,EAAQuB,KAAI,SAACC,EAAQC,GACjB,OAAO,yBACPC,IAAMD,EACNnB,UAAU,iBACVe,QAAS,SAACM,GAERA,EAAMC,iBAENhB,EAAkBY,KAIlBA,EAAOK,gBAAkB,yBAAKC,IAAMN,EAAOK,gBAAkBE,IAAMP,EAAOQ,cAAmB,KAI7FR,EAAOS,MAAQ,4BAAMT,EAAOS,OAAe,YC4C1CC,EA1HA,SAAC1B,GAAU,IAGhBK,EAAmCL,EAAnCK,aAAcF,EAAqBH,EAArBG,iBAHE,EAgBcwB,mBAAS,IAhBvB,mBAgBjBC,EAhBiB,KAgBJC,EAhBI,OAiB4BF,mBAAS,IAjBrC,mBAiBjBG,EAjBiB,KAiBGC,EAjBH,OAkBcJ,mBAAS,IAlBvB,mBAkBjBzC,EAlBiB,KAkBJ8C,EAlBI,OAmBML,mBAAS,OAnBf,mBAmBjB3C,EAnBiB,KAmBRiD,EAnBQ,OAoBoBN,mBAAS,OApB7B,mBAoBjB1C,EApBiB,KAoBDiD,EApBC,KA6DxB,OAhCAC,oBAAS,sBAAE,8BAAAzD,EAAA,+EAEkBS,IAFlB,cAEHiD,EAFG,gBAGwBzC,IAHxB,OAGH0C,EAHG,OAKPR,EAAeO,GACfL,EAAsBM,GANf,kDASP5B,QAAQC,MAAR,MATO,0DAcR,IAkBI,0BAAMb,GAAG,SAASyC,SAAQ,uCAAE,WAAOnB,GAAP,eAAAzC,EAAA,6DAEjCyC,EAAMC,iBACNf,GAAa,GAHoB,kBAMTtB,EAAkB,CAACC,UAASC,iBAAgBC,gBANnC,OAMzBsB,EANyB,OAO/BL,EAAiBK,GAPc,gDAS/BC,QAAQC,MAAR,MAT+B,yBAW/BL,GAAa,GAXkB,4EAAF,uDAc/B,kCACE,2BAAOkC,QAAQ,YAAf,SACA,2BACE1C,GAAG,WACH2C,KAAK,OACLC,YAAY,oBACZC,MAAOxD,EACPyD,SAAU,SAACxB,GAAD,OAAWa,EAAeb,EAAMyB,OAAOF,WAErD,kCACE,2BAAOH,QAAQ,yBAAf,kBAAsD,0BAAMzC,UAAU,wBAAhB,IAA0CgC,EAAmBe,OAA7D,MACtD,4BACEC,KAAK,iBACLjD,GAAG,wBACH6C,MAAOzD,EACP0D,SAAU,SAACxB,GAAD,OAAWe,EAAkBf,EAAMyB,OAAOF,SACpD,4BAAQA,MAAM,OAAd,OAEEZ,EAAmBf,KAAI,SAAC9B,EAAgBgC,GACtC,OAAO,4BAAQC,IAAMD,EAAMyB,MAAOzD,EAAe6D,MAC7C7D,EAAe6D,WAM3B,kCACE,2BAAOP,QAAQ,kBAAf,WAAwC,0BAAMzC,UAAU,iBAAhB,IAAmC8B,EAAYiB,OAA/C,MACxC,4BACEC,KAAK,UACLjD,GAAG,iBACH6C,MAAO1D,EACP2D,SAAU,SAACxB,GAAD,OAAWc,EAAWd,EAAMyB,OAAOF,SAC7C,4BAAQA,MAAM,OAAd,OAEEd,EAAYb,KAAI,SAAC/B,EAASiC,GAC1B,OAAO,4BAAQC,IAAMD,EAAMyB,MAAQ1D,EAAQ8D,MACvC9D,EAAQ8D,WAMlB,4CCzGWC,EATA,WACX,OACI,yBAAKlD,GAAG,SACJ,mDACA,uF,4CCNZ,gCAAAnB,EAAA,6DACQD,EADR,UACkBH,EADlB,mBACuCC,GADvC,kBAI2BI,MAAMF,GAJjC,cAIUG,EAJV,gBAKuBA,EAASC,OALhC,OAKUC,EALV,OAOI2B,QAAQuC,IAAIlE,GAPhB,kDASI2B,QAAQC,MAAR,MATJ,2D,0DAaAuC,GAEA,IAAMC,EAAM,WAAM,MAU0BvB,mBAAS,CAAEzB,KAAM,GAAIV,QAAS,KAVxD,mBAUTS,EAVS,KAUME,EAVN,OAW4BwB,mBAAS,MAXrC,mBAWOvB,GAXP,aAYkBuB,oBAAS,GAZ3B,mBAYTwB,EAZS,KAYE9C,EAZF,KAchB,OAAO,yBAAKP,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQO,aAAeA,EAAeF,iBAAmBA,IAEzD,kBAAC,EAAD,CAASF,cAAkBA,EAAgBI,aAAiBA,EAAeF,iBAAqBA,EAAmBC,kBAAsBA,IAMvI+C,EAAY,kBAAC,EAAD,MAAc,OAU/BC,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,S","file":"static/js/main.f35ec1f9.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=d6dd04c3-2eab-4302-bb3d-cbc81f88f99d';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\n const Loading = () => {\n    return (\n        <div id=\"loading\">\n            <h2 className=\"message\">Searching...</h2>\n        </div>\n    )\n}\n\nexport default Loading;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n   const { \n    searchResults: { info, records }, \n    setSearchResults, \n    setFeaturedResult, \n    setIsLoading \n } = props; \n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev} \n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n\n        records.map((record, idx) => {\n            return <div  \n            key={ idx }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              event.preventDefault()\n              // set the featured result to be this record, using setFeaturedResult\n              setFeaturedResult(record)\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n              record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null\n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n              record.title ? <h3>{ record.title }</h3> : null\n            }\n          </div>\n        })\n\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  \n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect( async () => {\n    try {\n      let allCenturies = await fetchAllCenturies();\n      let allClassifications = await fetchAllClassifications();\n\n      setCenturyList(allCenturies)\n      setClassificationList(allClassifications)\n\n    } catch (err) {\n      console.error(err)\n    }\n    \n    \n    // Promise.all([fetchAllCenturies, fetchAllClassifications]).then(setCenturyList, setClassificationList).catch(error => console.error(error.message))\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResults({century, classification, queryString})\n      setSearchResults(results);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the classificationList, return an <option /> */\n          classificationList.map((classification, idx) => {\n            return <option key={ idx } value={classification.name}>\n              { classification.name }\n            </option>\n          })\n        }\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */\n          centuryList.map((century, idx) => {\n          return <option key={ idx } value={ century.name }>\n            { century.name }\n        </option>\n          })\n        }\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\n const Title = () => {\n    return (\n        <div id=\"title\">\n            <h1> The Art Collector </h1>\n            <h5> Search the Harvard Art Museums' Private Collections </h5>\n        </div>\n    )\n}\n\nexport default Title; ","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BASE_URL, KEY } from './api/index';\n\n\n// These imports won't work until you fix ./components/index.js\nimport { \n  // Feature, \n  Loading, \n  Preview,\n  Search, \n  Title } from './components';\n\nasync function fetchObjects() {\n  const url = `${ BASE_URL }/object?${ KEY }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfetchObjects();\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] } );\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading={ setIsLoading } setSearchResults={ setSearchResults } />\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults = { searchResults } setIsLoading = { setIsLoading } setSearchResults = { setSearchResults } setFeaturedResult = { setFeaturedResult }/>\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    {/* <Feature featuredResult = { featuredResult } setIsLoading = { setIsLoading } setSearchResults = { setSearchResults }/> */}\n    {/* <Loading /> is static, but should only render when isLoading is true\n    <Loading /> use a ternary and render null if isLoading is false */}\n    { \n      isLoading ? <Loading /> : null \n    }\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\n ReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);"],"sourceRoot":""}